// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  BUYER
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  username  String
  password  String
  role      UserRoles
  cpf       String?
  name      String?
  birthDate DateTime?
  email     String?

  tickets Ticket[]

  @@map("users")
}

enum federativeUnits {
  BA
  SP
  RJ
  MG
  RN
  RS
}

model City {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  deletedAt      DateTime?
  name           String
  federativeUnit federativeUnits
  airports       Airport[]

  @@map("cities")
}

model Airport {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  deletedAt       DateTime?
  city            City      @relation(fields: [cityId], references: [id])
  cityId          String
  name            String
  iataCode        String    @unique
  flightsLeaving  Flight[]  @relation("flightsLeaving")
  flightsArriving Flight[]  @relation("flightsArriving")

  @@map("airports")
}

enum FlightStatus {
  CONFIRMED
  CANCELED
}

model Flight {
  id                   String       @id @default(uuid())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now()) @updatedAt
  deletedAt            DateTime?
  departureTime        DateTime
  code                 String       @unique
  departureAirport     Airport      @relation("flightsLeaving", fields: [departureAirportId], references: [id])
  departureAirportId   String
  destinationAirport   Airport      @relation("flightsArriving", fields: [destinationAirportId], references: [id])
  destinationAirportId String
  status               FlightStatus @default(CONFIRMED)

  flightClasses FlightClass[]

  @@map("flights")
}

enum FlightClassOptions {
  A
  B
  C
  D
  E
}

model FlightClass {
  id        String             @id @default(uuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
  deletedAt DateTime?
  flight    Flight             @relation(fields: [flightId], references: [id])
  flightId  String
  quantity  Int
  value     Int
  type      FlightClassOptions

  tickets Ticket[]

  @@map("flight_classes")
}

model Ticket {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  deletedAt     DateTime?
  code          String      @unique
  name          String
  cpf           String
  birthdate     DateTime
  totalValue    Int
  flightClass   FlightClass @relation(fields: [flightClassId], references: [id])
  flightClassId String
  buyerId       String
  buyer         User        @relation(fields: [buyerId], references: [id])
  luggage       Luggage?

  @@map("tickets")
}

model Luggage {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  code      String    @unique
  ticket    Ticket    @relation(fields: [ticketId], references: [id])
  ticketId  String    @unique
}
